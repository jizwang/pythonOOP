 #变量作用域：
 LEGB原则：
 -L（local）:局部作用域
 -E(Enclosing function locale) 外部嵌套函数作用域
 -G(Global module)函数定义所在的模块作用域
 -B(Buildin):python内置魔抗的作用域

 eval()函数
 eval(string_code,globals=None,locals = None)
 exec()函数与eval()函数功能相似，不返回结果

 递归函数
 - 函数直接或者间接调用自己
 - 优点：简洁，理解容易
 - 缺点：对递归深度有限制，消耗资源大。
 - python对递归深度有限制，超过限制报错
 - 在写递归程序的时候，考虑递归次数

 #内置数据结构（变量类型）
 - list
 - set
 - dict
 - tuple
##list(列表)
- 一组由顺序的数据组合
- 创建列表
    - 空列表

 汉诺塔问题：递归

 传值与传地址的区别：
传值不改变外部的值
传地址改变内外

python的面向对象


1.面向对象概述：
oop思想：
    - 接触到任务，首先想到的是这个任务这个世界的组成，是由模型构成的
几个名词：
    - OO：面向对象
    - OOA：面向对象的分析
    - OOD：面向对象的设计
    - OOI：XXX的实现
    - OOP：XXX的编程
    - OOA->OOD->OOI：面向对象的实现过程
类中的内容：应该具有两个内容：
    表明事物的特征，叫做属性
    表明事物功能或动作，称为成员方法（函数）

2.类和对象的概念
    类：抽象名词
类的命名：
    遵守变量命名的

3.关于self：
 - self在对象中表示对象本身，如果通过对象调用一个方法，那么该对象会自动传入到当前方法的第一个参数中
 -  self不是关键字，只是一个用于接受对象的普通参数，理论上可以用任何一个普通变量名代替
 -  方法中有self形参的方法成为非绑定类的方法，乐意通过对象访问，没有self的是绑定类的方法，只能通过类访问
 -  使用类访问绑定类的方法时，如果类方法中需要访问当钱类的成员，可以通过__class__成员名来访问
4，三大特性：
 - 封装 继承 多态

4.1 封装
 - 封装就是对对象的成员就行访问
 - 封装的三个级别：
     - 公开：public
     - 受保护的：protected
     - 私有的：private
     - p,p,p不是关键字
    判别对象的位置：
        对象内部
        对象外部
        子类中
    私有
        私有成员是最高级别的封装，只能在当前类或对象中访问
        在成员钱添加两个下划线即可
                class Person():
                    name = "Liuying"
                    __age = 18
        Python的私有不是真私有，是一种成为name mangling的改名策略，
        可以使用对象名._classname__attribute
受保护的封装 protected
    受保护的封装是将对象成员进行一定程度的封装，然后在类中或者子类中都可以进行访问，在外部不可以
    封装方法：在成员名称前添加一个下划线即可

 公开的 public
    公共的封装实际对成员没有任何操作，任何地方可以访问
 4.2继承
    继承就是一个类可以获得另一个类中的成员属性和方法
    作用：减少代码，增加代码的复用功能，同时可以设置类与类直接的关系
    继承与被继承的概念：
        被继承的类叫父类，也叫基类，也叫超类
        用于继承的类，叫子类，也叫派生类
        继承与被继承一定存在一个is-a关系
继承的特征
    子类继承父类后并没有将父类成员完全赋值到子类后，而是通过引用关系访问通过
    子类中可以定义独有的成员属性和方法.
    子类扩充父类功能,可以在定义新方法的同时访问父类成员来进行代码重用
    可以使用【父类名.父类成员】的格式调用父类成员，也可以使用super().父类成员的继承来调用
    子类可以继承父类的属性和方法，私有属性和方法除外

继承变量函数的查找顺序问题
    优先查找自己的变量
    没有则查找父类
    构造函数如果在本类中没有定义，则自动查找调用父类构造函数
    如果本类中有定义，则不再继续向上查找
构造函数
    是一类特殊的函数，在类进行实例化之前进行调用
    如果定义了构造函数，则实例化时使用构造函数，不查找父类构造函数
    构造函数一定要有，如果没有，则自动向上查找
super
    super不是关键字，而是一个类
    作用是获取MRO列表中一个类
    super于父类没有直接实质性关系，但通过super可以调用多父类
单继承和多继承
    单继承：每个类只能继承一个类
    多继承：每个类允许继承多个类
    多继承：
        优点：类的功能扩展方便
        缺点：继承关系混乱
菱形问题/钻石继承问题：
    多个子类继承同一个父类，这些子类由被同一个子类继承，于是继承关系图形成一个菱形图谱
    【MRO】
    关于多继承的MRO:
        MRO就是多继承中，用于保存继承顺序的一个列表
        python本身采用C3算法来继承菱形继承进行计算的结果
        MRO列表的计算原则：
            子类永远在父类前面
            如果多个类继承同一个父类，孙子类只会选取继承语法括号中第一个父类的父类

4.3多态
多态就是同一个对象在不同情况下有不同的状态出现
多态不是语法，是一种设计思想
多态性：一种调用方式，不同的执行效果
多态：同一事物的多种形态，动物分为人类、狗类、猪类


Mixin设计模式
    主要采用多继承方式对类的功能进行扩展
我们使用多继承语法来实现Mixin
使用Mixin实现多继承的时候非常小心
    首先他必须表示某一单一功能，而不是某个物品
    职责必须单一，如果有多个功能，则写多个Mixin
    Mixin不能依赖于子类的实现
    子类即使没有继承这个Mixin类，也能照样工作，只是缺少了某个功能
优点：
    使用Mixin可以在不对类进行修改的情况下，扩充功能
    可以方便的组织和维护不同功能组件的划分
    可以根据需要任意调整功能类的组合
    可以避免创建很多的类，避免类的继承关系混乱

5.类相关函数
issubclass:检测一个类是否是另一个类的子类
isinstance:检测一个对象是否是另一个类的实例
hasattrL：检测一个对象是否有成员xxx
getattr:
setattr:
dir:获取对象的属性列表

6.类的成员描述符（属性）
类的成员描述符是为了在类中对类的成员属性进行相关操作而创建的一种方式
    get
    set
    delect
使用类的成员描述符，大概有三种方法
    实用类实现描述器
    使用属性修饰符
    使用property函数
        property函数很简单
        property(fget,fset,fdel,doc)

    无论哪种修饰符都是为了对成员属性进行相应的控制
        类的方式：适合多个类中的多个属性共用一个描述符
        property：使用当前类中使用，可以控制一个类中多个属性
        属性修饰符：使用与当前类中使用，控制一个类中一个属性
7.类的内置属性
    __dict__：类的成员组成
    __doc__：获取类的文档信息
    __name__：获取类的名称。如果在模块中使用，获取模块的名称
    __bases__：获取某个类的所有父类
8.类的常用魔术方法
 魔术方法就是不需要人为调用的方法，基本是在特定的时刻自动触发
 魔术方法的统一的特征：方法名被前后各两个下划线包裹
 操作类：
     __init__构造函数
     __new__：对象实例化对象（第一个被调用的函数），此方法比较特殊，一般不用
     __call__：对象当函数使用的时候触发
     __str__:当对象被当做字符串使用的时候可以触发这个函数
     __repr__:返回字符串，跟__str__具体区别百度
 描述符相关
    __set__
    __get__
    __delete__
 属性操作相关
    __getattr__:访问一个不存在的属性时触发
    __setattr__:对成员属性进行设置的时候触发
    参数：
        self用来获取当前对象
        被设置的属性名称，以字符串形式出现
        需要对属性名称设置的值
    作用：
        进行属性设置的时候进行验证或者修改
        注意：在该方法中不能对属性直接进行复制操作，否则进入死循环
 运算分类相关魔术方法
    __gt__:进行大于判断的时候触发的函数
    参数：
        self
        第二个参数是第二个对象
        返回值可以是任意值，推荐返回布尔值
 9.类和对象的三种方法
     实例方法
        需要实例化对象才能使用
     静态：
        不需要实例化通过类直接访问
     类方法：
        不需要实例化
10.抽象类
    抽象方法：没有具体实现内容的方法称为抽象方法
    抽象方法的主要意义是规范了子类的行为和接口
    抽象类的使用需要借助abc模块

    抽象类：包含抽象方法的类叫抽象类，也叫abc类
    抽象类的使用：
        抽象类可以包含抽象方法，也可以包含具体方法
        。。。可以有方法也可以有属性
        。。。不允许直接实例化
        必须继承才可以使用，且继承的子类必须实现所有继承来的抽象方法
        假定子类没有实现所有继承的抽象方法，则子类也不能实例化
        抽象类的主要作用是设定类的标准，以便于开发的时候具有统一的规范
11.自定义类
类其实是一个类定义和其他方法的自由组合
可以定义类和函数，然后自己通过类直接赋值
可以借助于MethodType实现
借助于type实现
利用元类实现-MetaClass
    元类是类
    备用来创造别的类






